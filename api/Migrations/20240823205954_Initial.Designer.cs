// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240823205954_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.data.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BenningTerm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataInicial");

                    b.Property<string>("Breif")
                        .HasColumnType("text")
                        .HasColumnName("Apresentacao");

                    b.Property<int>("CertificateStatus")
                        .HasColumnType("integer")
                        .HasColumnName("Estatus");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("NumeroContrato");

                    b.Property<string>("ContractedDocument")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("DocumentoContratada");

                    b.Property<string>("ContractedName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NomeContratada");

                    b.Property<string>("ContractorAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("EnderecoContratante");

                    b.Property<string>("ContractorDocument")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("DocumentoContratante");

                    b.Property<string>("ContractorName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NomeContratante");

                    b.Property<DateTime?>("EndTerm")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataFinal");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ExtensaoArquivo");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CaminhoArquivo");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("CodigoArquivo");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DataEmissao");

                    b.Property<string>("SignerEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("EmailAssinanteContratada");

                    b.Property<string>("SignerName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("AssinanteContratada");

                    b.Property<string>("SignerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TelefoneAssinanteContratada");

                    b.Property<string>("SignerRole")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CargoAssinanteContratada");

                    b.HasKey("Id");

                    b.ToTable("Certificados", (string)null);
                });

            modelBuilder.Entity("api.data.CertificateGlossaryEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uuid");

                    b.Property<int>("GlossaryEntryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("GlossaryEntryId");

                    b.ToTable("CertificadoGlossario", (string)null);
                });

            modelBuilder.Entity("api.data.FunctionPoints", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uuid");

                    b.Property<double>("Hours")
                        .HasColumnType("double precision")
                        .HasColumnName("Horas");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("PontosFuncao", (string)null);
                });

            modelBuilder.Entity("api.data.GlossaryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Estatus");

                    b.Property<int?>("SynonymOfId")
                        .HasColumnType("integer");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Palavra");

                    b.HasKey("Id");

                    b.HasIndex("SynonymOfId");

                    b.ToTable("Glossario", (string)null);
                });

            modelBuilder.Entity("api.data.ServiceHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Nome");

                    b.Property<double>("Qtd")
                        .HasColumnType("double precision")
                        .HasColumnName("Qtd");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("HorasServico", (string)null);
                });

            modelBuilder.Entity("api.data.CertificateGlossaryEntry", b =>
                {
                    b.HasOne("api.data.Certificate", "Certificate")
                        .WithMany("CertificateGlossaryEntry")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.data.GlossaryEntry", "GlossaryEntry")
                        .WithMany("CertificateGlossaryEntrys")
                        .HasForeignKey("GlossaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("GlossaryEntry");
                });

            modelBuilder.Entity("api.data.FunctionPoints", b =>
                {
                    b.HasOne("api.data.Certificate", "Certificate")
                        .WithMany("FunctionPoints")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("api.data.GlossaryEntry", b =>
                {
                    b.HasOne("api.data.GlossaryEntry", "SynonymOf")
                        .WithMany("Synonyms")
                        .HasForeignKey("SynonymOfId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SynonymOf");
                });

            modelBuilder.Entity("api.data.ServiceHours", b =>
                {
                    b.HasOne("api.data.Certificate", "Certificate")
                        .WithMany("ServicesHours")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("api.data.Certificate", b =>
                {
                    b.Navigation("CertificateGlossaryEntry");

                    b.Navigation("FunctionPoints");

                    b.Navigation("ServicesHours");
                });

            modelBuilder.Entity("api.data.GlossaryEntry", b =>
                {
                    b.Navigation("CertificateGlossaryEntrys");

                    b.Navigation("Synonyms");
                });
#pragma warning restore 612, 618
        }
    }
}
